name: "Build and deploy to production"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "v*.*.*-beta.*"

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build image with latest version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tags Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/goalpha
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./cmd
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_KEY }}
          script: |
            # Check if the Docker network exists, if not, create it
            if ! docker network inspect peer-drop &>/dev/null; then
              docker network create peer-drop
              echo "Docker network 'peer-drop' đã được tạo."
            else
              echo "Docker network 'peer-drop' đã tồn tại."
            fi

            # Pull the Docker image from Docker Hub
            docker pull ${{ steps.meta.outputs.tags }}

            # Remove the existing container if it's running
            docker rm -f backend &>/dev/null

            # Run the new container
            docker run -d -p 8080:8080 --network peer-drop --name backend ${{ steps.meta.outputs.tags }}
